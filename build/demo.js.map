{"version":3,"file":"demo.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAc,KAAID,IAElBD,EAAW,KAAIC,IARjB,CASGK,MAAM,I,mBCRT,IAAIC,EAAsB,CCA1BA,EAAwB,CAACL,EAASM,KACjC,IAAI,IAAIC,KAAOD,EACXD,EAAoBG,EAAEF,EAAYC,KAASF,EAAoBG,EAAER,EAASO,IAC5EE,OAAOC,eAAeV,EAASO,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EF,EAAwB,CAACQ,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFT,EAAyBL,IACH,oBAAXkB,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeV,EAASkB,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeV,EAAS,aAAc,CAAEoB,OAAO,M,6CCLvD,IA8EMC,EAAmB,2wCAyCzB,SACC,CACCC,MAAO,WACPC,SAAU,2BACVC,YACC,2QACDC,MAAO,UACPC,MAAO,CACN,CACCJ,MAAO,QACPE,YAAa,kGACbG,QAAS,iFACTC,KAAM,CACLC,SAAU,+BACVJ,MAAO,IACPK,YAtIkB,+jCAuIlBC,QAAS,KAGX,CACCT,MAAO,QACPE,YACC,iHACDG,QAAS,GACTC,KAAM,CACLC,SAAU,+BACVC,YA1GkB,uqCA+GtB,CACCR,MAAO,WACPC,SAAU,2BACVC,YACC,2QACDC,MAAO,UACPC,MAAO,CACN,CACCJ,MAAO,QACPE,YAAa,kGACbG,QAAS,iFACTC,KAAM,CACLC,SAAU,+BACVC,YAAaT,EACbU,QAAS,CAAC,GAAI,GAAI,MAGpB,CACCT,MAAO,QACPE,YACC,iHACDG,QAAS,GACTC,KAAM,CACLC,SAAU,+BACVC,YAAaT,EACbU,QAAS,CAAC,GAAI,SC5KZ,IAAMC,EAAoB,WAChC,OAAO,IAAIC,SAAQ,SAACC,GACnBC,YAAW,kBAAMD,EAAQE,EAAAA,GAAAA,MAAAA,GAAAA,QAAgC,O","sources":["webpack://highlightsb/webpack/universalModuleDefinition","webpack://highlightsb/webpack/bootstrap","webpack://highlightsb/webpack/runtime/define property getters","webpack://highlightsb/webpack/runtime/hasOwnProperty shorthand","webpack://highlightsb/webpack/runtime/make namespace object","webpack://highlightsb/./src/demo/data.ts","webpack://highlightsb/./src/demo/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"demo\"] = factory();\n\telse\n\t\troot[\"demo\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const fileContentOne = `import UIKit\n\nclass ReminderListDataSource: NSObject {\n    typealias ReminderCompletedAction = (Int) -> Void\n    typealias ReminderDeletedAction = () -> Void\n    typealias RemindersChangedAction = () -> Void\n\n    enum Filter: Int {\n        case today\n        case future\n        case all\n\n        func shouldInclude(date: Date) -> Bool {\n            let isInToday = Locale.current.calendar.isDateInToday(date)\n            switch self {\n                case .today:\n                    return isInToday\n                case .future:\n                    return (date > Date()) && !isInToday\n                case .all:\n                    return true\n            }\n        }\n    }\n\n    var filter: Filter = .today\n\n    var filteredReminders {\n        return false;\n    }\n\n    var percentComplete: Double {\n        guard filteredReminders.count > 0 else {\n            return 1\n        }\n        let numComplete: Double = filteredReminders.reduce(0) { $0 + ($1.isComplete ? 1 : 0) }\n        return numComplete / Double(filteredReminders.count)\n    }\n}`;\nconst fileContentTwo = `import UIKit\n\nclass ReminderListDataSource: NSObject {\n    typealias ReminderCompletedAction = (Int) -> Void\n    typealias ReminderDeletedAction = () -> Void\n    typealias RemindersChangedAction = () -> Void\n\n    enum Filter: Int {\n        case today\n        case future\n        case all\n\n        func shouldInclude(date: Date) -> Bool {\n            let isInToday = Locale.current.calendar.isDateInToday(date)\n            switch self {\n                case .today:\n                    return isInToday\n                case .future:\n                    return (date > Date()) && !isInToday\n                case .all:\n                    return true\n            }\n        }\n    }\n\n    var filter: Filter = .today\n\n    var filteredReminders: [Reminder] {\n        return reminders.filter { filter.shouldInclude(date: $0.dueDate) }.sorted { $0.dueDate < $1.dueDate }\n    }\n\n    var percentComplete: Double {\n        guard filteredReminders.count > 0 else {\n            return 1\n        }\n        let numComplete: Double = filteredReminders.reduce(0) { $0 + ($1.isComplete ? 1 : 0) }\n        return numComplete / Double(filteredReminders.count)\n    }\n}`;\nconst fileContentThree = `import UIKit\n\nclass ReminderListDataSource: NSObject {\n    typealias ReminderCompletedAction = (Int) -> Void\n    typealias ReminderDeletedAction = () -> Void\n    typealias RemindersChangedAction = () -> Void\n\n    enum Filter: Int {\n        case today\n        case future\n        case all\n\n        func shouldInclude(date: Date) -> Bool {\n            let isInToday = Locale.current.calendar.isDateInToday(date)\n            switch self {\n                case .today:\n                    return isInToday\n                case .future:\n                    return (date > Date()) && !isInToday\n                case .all:\n                    return true\n            }\n        }\n    }\n\n    var filter: Filter = .today\n\n    var filteredReminders: [Reminder] {\n        return reminders.filter { filter.shouldInclude(date: $0.dueDate) }.sorted { $0.dueDate < $1.dueDate }\n    }\n\n    var percentComplete: Double {\n        guard filteredReminders.count > 0 else {\n            return 1\n        }\n        let numComplete_one: Double = filteredReminders.reduce(0) { $0 + ($1.isComplete ? 1 : 0) }\n        let numComplete_two: Double = filteredReminders.reduce(0) { $0 + ($1.isComplete ? 1 : 0) }\n        return numComplete / Double(filteredReminders.count)\n    }\n}`;\n\nexport default [\n\t{\n\t\ttitle: \"Секция 1\",\n\t\tsubtitle: \"Load a Specific Reminder\",\n\t\tdescription:\n\t\t\t\"Today represents reminders using its internal Reminder model. Before writing reminder data to the event store, you need to retrieve the corresponding EKReminder object. In this section, write a new method that retrieves an EKReminder object for a given identifier.\",\n\t\timage: \"example\",\n\t\tsteps: [\n\t\t\t{\n\t\t\t\ttitle: \"Шаг 1\",\n\t\t\t\tdescription: \"Add a method named readReminder to the bottom of the extension in ReminderListDataSource.swift.\",\n\t\t\t\tcomment: \"Start by adding a method to fetch an individual reminder from the event store.\",\n\t\t\t\tcode: {\n\t\t\t\t\tfilename: \"ReminderListDataSource.swift\",\n\t\t\t\t\timage: \" \",\n\t\t\t\t\tpreviewCode: fileContentOne,\n\t\t\t\t\tmarkers: [],\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: \"Шаг 2\",\n\t\t\t\tdescription:\n\t\t\t\t\t\"Call the completion handler with nil and exit the method if the user hasn’t granted access to their reminders.\",\n\t\t\t\tcomment: \"\",\n\t\t\t\tcode: {\n\t\t\t\t\tfilename: \"ReminderListDataSource.swift\",\n\t\t\t\t\tpreviewCode: fileContentTwo,\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\ttitle: \"Секция 2\",\n\t\tsubtitle: \"Load a Specific Reminder\",\n\t\tdescription:\n\t\t\t\"Today represents reminders using its internal Reminder model. Before writing reminder data to the event store, you need to retrieve the corresponding EKReminder object. In this section, write a new method that retrieves an EKReminder object for a given identifier.\",\n\t\timage: \"example\",\n\t\tsteps: [\n\t\t\t{\n\t\t\t\ttitle: \"Шаг 1\",\n\t\t\t\tdescription: \"Add a method named readReminder to the bottom of the extension in ReminderListDataSource.swift.\",\n\t\t\t\tcomment: \"Start by adding a method to fetch an individual reminder from the event store.\",\n\t\t\t\tcode: {\n\t\t\t\t\tfilename: \"ReminderListDataSource.swift\",\n\t\t\t\t\tpreviewCode: fileContentThree,\n\t\t\t\t\tmarkers: [30, 31, 32],\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: \"Шаг 2\",\n\t\t\t\tdescription:\n\t\t\t\t\t\"Call the completion handler with nil and exit the method if the user hasn’t granted access to their reminders.\",\n\t\t\t\tcomment: \"\",\n\t\t\t\tcode: {\n\t\t\t\t\tfilename: \"ReminderListDataSource.swift\",\n\t\t\t\t\tpreviewCode: fileContentThree,\n\t\t\t\t\tmarkers: [35, 36],\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n];\n","import data_example from \"./data\";\nimport \"./index.sass\";\n\nexport const asyncQueryExample = () => {\n\treturn new Promise((resolve) => {\n\t\tsetTimeout(() => resolve(data_example[0].steps[0].code), 0);\n\t});\n};\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","fileContentThree","title","subtitle","description","image","steps","comment","code","filename","previewCode","markers","asyncQueryExample","Promise","resolve","setTimeout","data_example"],"sourceRoot":""}